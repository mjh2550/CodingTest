package Inf;

import java.util.Stack;

public class Solve5 implements SolveProblem{
    @Override
    public void Problem() {
        //P5_1();
        //P5_2();
        //P5_3();
        P5_4();
    }

    public void P5_1(){
        /**
         * 1. 올바른 괄호
         * 설명
         *
         * 괄호가 입력되면 올바른 괄호이면 “YES", 올바르지 않으면 ”NO"를 출력합니다.
         *
         * (())() 이것은 괄호의 쌍이 올바르게 위치하는 거지만, (()()))은 올바른 괄호가 아니다.
         *
         *
         * 입력
         * 첫 번째 줄에 괄호 문자열이 입력됩니다. 문자열의 최대 길이는 30이다.
         *
         *
         * 출력
         * 첫 번째 줄에 YES, NO를 출력한다.
         *
         *
         * 예시 입력 1
         *
         * (()(()))(()
         * 예시 출력 1
         *
         * NO
         */

        /**
         * 굳이 닫는괄호를 저장시키지 않아도 된다.
         */
        String str  = "(()(()))(()";
        String ok = "YES";
        Stack<Character> stack = new Stack<>();
        for(char c : str.toCharArray()){
            if(c=='(')
            stack.push(c);
            else{
                if(stack.isEmpty())
                    ok = "NO";
                stack.pop();
            }
        }

        if(!stack.isEmpty()) ok="NO"; //(괄호가 더 많으면 false

        System.out.print(ok);


    }

    public void P5_2(){
        /**
         * 2. 괄호문자제거
         * 설명
         *
         * 입력된 문자열에서 소괄호 ( ) 사이에 존재하는 모든 문자를 제거하고 남은 문자만 출력하는 프로그램을 작성하세요.
         *
         *
         * 입력
         * 첫 줄에 문자열이 주어진다. 문자열의 길이는 100을 넘지 않는다.
         *
         *
         * 출력
         * 남은 문자만 출력한다.
         *
         *
         * 예시 입력 1
         *
         * (A(BC)D)EF(G(H)(IJ)K)LM(N)
         * 예시 출력 1
         *
         * EFLM
         */

        String str = "(A(BC)D)EF(G(H)(IJ)K)LM(N)";
        Stack<Character> stk  = new Stack<>();

        for(char c : str.toCharArray()){
            if(c=='(') stk.push(c);
            else{
                //괄호사이에 문자가 있음
                //비어있지 않을 때
                //문자인 경우, 무시 )인 경우 pop
                if(!stk.isEmpty()){
                    if(c==')')
                        stk.pop();
                }
                else { //비어있을 때
                    System.out.print(c);
                }
            }
        }

    }

    public void P5_3(){
        /**
         * 3. 크레인 인형뽑기(카카오)
         * 설명
         *
         * 게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
         *
         * 죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
         *
         * Image1.jpg
         *
         * 게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다.
         *
         * (위 그림은 5 x 5 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.
         *
         * 모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다.
         *
         * 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데,
         *
         * 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.
         *
         * 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.
         *
         * Image1.jpg
         *
         * 만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다.
         *
         * 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.
         *
         * Image1.jpg
         *
         * 크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.
         *
         * 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)
         *
         * 게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때,
         *
         * 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 구하는 프로그램을 작성하세요.
         *
         *
         * 입력
         * 첫 줄에 자연수 N(5<=N<=30)이 주어집니다.
         *
         * 두 번째 줄부터 N*N board 배열이 주어집니다.
         *
         * board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
         *
         * 0은 빈 칸을 나타냅니다.
         *
         * 1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
         *
         * board배열이 끝난 다음줄에 moves 배열의 길이 M이 주어집니다.
         *
         * 마지막 줄에는 moves 배열이 주어집니다.
         *
         * moves 배열의 크기는 1 이상 1,000 이하입니다.
         *
         * moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.
         *
         *
         * 출력
         * 첫 줄에 터트려져 사라진 인형의 개수를 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 5
         * 0 0 0 0 0
         * 0 0 1 0 3
         * 0 2 5 0 1
         * 4 2 4 4 2
         * 3 5 1 3 1
         * 8
         * 1 5 3 5 1 2 1 4
         * 예시 출력 1
         *
         * 4
         */

        /**
         *  board 는 N x N
         */
        int n = 5;
        int [][] board ={{0 ,0, 0, 0, 0}
                        ,{0, 0, 1 ,0 ,3}
                        ,{0, 2, 5 ,0 ,1}
                        ,{4, 2, 4 ,4 ,2}
                        ,{3, 5, 1 ,3 ,1}};
        int k = 8;
        int [] moves = {1 ,5 ,3 ,5, 1, 2, 1, 4}; //4 3 11 3 204
        Stack<Integer> stk = new Stack<>();

        /**
         * 차례대로 순회하는게 아닌 moves 배열 순서대로 순회
         */
        int cnt=0;
        int x =0;
        for(int i =0 ;i<k ; i++){//moves 가 board x축을 가리킴
            int y = moves[i]-1;
            if(board[x][y]==0){//텅 비었으면
                //x축 증가하여 다음 행 확인
                if(x+1>=n){
                    stk.push(0);
                }else {
                    x++;
                    i--;
                }
            }else{//인형 있으면

                if(!stk.isEmpty() && stk.peek()==board[x][y]){//이전꺼랑 같으면 푸시하지말고 pop 후 카운트 2개증가
                    stk.pop();
                    cnt += 2;
                }else {
                    stk.push(board[x][y]); //스택에 푸쉬 후 다음 집게
                }
                    board[x][y] = 0;
                    x = 0;

            }
        }

        System.out.println(cnt);

    }

    public void P5_4(){
        /**
         * 4. 후위식 연산(postfix)
         * 설명
         *
         * 후위연산식이 주어지면 연산한 결과를 출력하는 프로그램을 작성하세요.
         *
         * 만약 3*(5+2)-9 을 후위연산식으로 표현하면 352+*9- 로 표현되며 그 결과는 12입니다.
         *
         *
         * 입력
         * 첫 줄에 후위연산식이 주어집니다. 연산식의 길이는 50을 넘지 않습니다.
         *
         * 식은 1~9의 숫자와 +, -, *, / 연산자로만 이루어진다.
         *
         *
         * 출력
         * 연산한 결과를 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 352+*9-
         * 예시 출력 1
         *
         * 12
         */
        String  str = "352+*9-";
        Stack<Integer> stk = new Stack<>();

        /**
         * 숫자이면 푸시, 연산자면 연산 처리
         * char '5' 에서는 - 48(0) 해줘야 숫자 5가 됨
         */

        int lt=0;
        int rt=0;
        for(char a : str.toCharArray()){
            if(Character.isDigit(a)){
                stk.push(Character.getNumericValue(a));
                //stk.push(a-48);
            }else{
                if(!stk.isEmpty()){//스택이 비어있지 않으면 연산
                    rt = stk.pop();
                    lt = stk.pop();
                    if(a =='*') stk.push(lt*rt);
                    else if (a=='-')stk.push(lt-rt);
                    else if (a=='/')stk.push(lt/rt);
                    else if (a=='+')stk.push(lt+rt);

                }
            }
        }
        System.out.println(stk);
    }
}
