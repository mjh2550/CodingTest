package Inf;

import java.util.ArrayList;
import java.util.Arrays;

public class Solve {

    public void Problem(){
        //P2_3();
        //P2_4();
        //P2_5();
        //P2_6();
        //P2_7();
        P2_8();


    }

    public void P2_3(){
        /**
         * 3. 가위 바위 보
         * 설명
         *
         * A, B 두 사람이 가위바위보 게임을 합니다. 총 N번의 게임을 하여 A가 이기면 A를 출력하고, B가 이기면 B를 출력합니다. 비길 경우에는 D를 출력합니다.
         *
         * 가위, 바위, 보의 정보는 1:가위, 2:바위, 3:보로 정하겠습니다.
         *
         * 예를 들어 N=5이면
         *
         * Image1.jpg
         *
         * 두 사람의 각 회의 가위, 바위, 보 정보가 주어지면 각 회를 누가 이겼는지 출력하는 프로그램을 작성하세요.
         *
         *
         * 입력
         * 첫 번째 줄에 게임 횟수인 자연수 N(1<=N<=100)이 주어집니다.
         *
         * 두 번째 줄에는 A가 낸 가위, 바위, 보 정보가 N개 주어집니다.
         *
         * 세 번째 줄에는 B가 낸 가위, 바위, 보 정보가 N개 주어집니다.
         *
         *
         * 출력
         * 각 줄에 각 회의 승자를 출력합니다. 비겼을 경우는 D를 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 5
         * 2 3 3 1 3
         * 1 1 2 2 3
         * 예시 출력 1
         *
         * A
         * B
         * A
         * B
         * D
         */

        int N = 5;
        int [] arr = {2, 3, 3, 1 ,3};
        int [] arr2 = {1,1, 2, 2, 3};

        for (int i = 0 ; i<N ; i++){
            if(arr[i] == arr2[i]){
                System.out.println("D");
                continue;
            }else if(arr[i]>arr2[i]){//23  / 1 2
                if(arr[i]==3 && arr2[i]==1){
                    System.out.println("B");
                }else{
                    System.out.println("A");
                }
            }else if(arr[i]<arr2[i]){//12 //23
                if(arr[i]==1 && arr2[i]==3){
                    System.out.println("A");
                }else{{
                    System.out.println("B");
                }}
            }
        }





    }

    public void P2_4(){
        /**
         * 4. 피보나치 수열
         * 설명
         *
         * 1) 피보나치 수열을 출력한다. 피보나치 수열이란 앞의 2개의 수를 합하여 다음 숫자가 되는 수열이다.
         *
         * 2) 입력은 피보나치 수열의 총 항의 수 이다. 만약 7이 입력되면 1 1 2 3 5 8 13을 출력하면 된다.
         *
         *
         * 입력
         * 첫 줄에 총 항수 N(3<=N<=45)이 입력된다.
         *
         *
         * 출력
         * 첫 줄에 피보나치 수열을 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 10
         * 예시 출력 1
         *
         * 1 1 2 3 5 8 13 21 34 55
         */

        int N = 10;
        int arr[] = new int [N];//{1 ,1 ,2 ,3 ,5 ,8 ,13 ,21 ,34, 55};

        /**
         * 피보나치 수열
         * 첫항, 둘째항은 항상 1
         * 첫항 a, 둘째항 b일 때, 다음항은 c = a+b
         * c의 다음항부터는 한 칸씩 밀려서 a=b , b=c, c=a+b가 반복된다.
         */
        int a = 1, b =1, c=0;
        for(int i=2; i<N ; i++){

            if(i==2) {
                c = a + b;
                System.out.print(a + " " + b + " " + c + " ");
                continue;
            }
            a=b;
            b=c;
            c = a + b;
            System.out.print(c+" ");

        }

    }

    public void P2_5(){
        /**
         * 5. 소수(에라토스테네스 체)
         * 설명
         *
         * 자연수 N이 입력되면 1부터 N까지의 소수의 개수를 출력하는 프로그램을 작성하세요.
         *
         * 만약 20이 입력되면 1부터 20까지의 소수는 2, 3, 5, 7, 11, 13, 17, 19로 총 8개입니다.
         *
         *
         * 입력
         * 첫 줄에 자연수의 개수 N(2<=N<=200,000)이 주어집니다.
         *
         *
         * 출력
         * 첫 줄에 소수의 개수를 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 20
         * 예시 출력 1
         *
         * 8
         */

        int N =20;

        /**
         * 에리스토테네스의 체
         * 소수를 찾는 방법론 중 하나.
         *
         * 1. 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.
         * 2. 2는 소수이므로 오른쪽에 2를 쓴다. (빨간색)
         * 3. 자기 자신을 제외한 2의 배수를 모두 지운다.
         * 4. 남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색)
         * 5. 자기 자신을 제외한 3의 배수를 모두 지운다.
         * 6. 남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색)
         * 7. 자기 자신을 제외한 5의 배수를 모두 지운다.
         * 8. 남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색)
         * 9. 자기 자신을 제외한 7의 배수를 모두 지운다.
         * 10. 위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다.
         *
         */
        if(N<=1)return;

        ArrayList<Integer> arrayList = new ArrayList<>();

        for (int i=2 ; i<=N ; i++){
            if(i==2 ||i==3||i==5||i==7){//2357 남김
                System.out.println(i);
                arrayList.add(i);
                continue;
            }
            if(i%2==0 || i%3==0 || i%5 ==0|| i%7==0){//2,3,5,7의 배수는 지운다
                continue;
            }
            System.out.println(i);
            arrayList.add(i);
        }

    }

    public void P2_6(){
        /**
         * 6. 뒤집은 소수
         * 설명
         *
         * N개의 자연수가 입력되면 각 자연수를 뒤집은 후 그 뒤집은 수가 소수이면 그 소수를 출력하는 프로그램을 작성하세요.
         *
         * 예를 들어 32를 뒤집으면 23이고, 23은 소수이다. 그러면 23을 출력한다. 단 910를 뒤집으면 19로 숫자화 해야 한다.
         *
         * 첫 자리부터의 연속된 0은 무시한다.
         *
         *
         * 입력
         * 첫 줄에 자연수의 개수 N(3<=N<=100)이 주어지고, 그 다음 줄에 N개의 자연수가 주어진다.
         *
         * 각 자연수의 크기는 100,000를 넘지 않는다.
         *
         *
         * 출력
         * 첫 줄에 뒤집은 소수를 출력합니다. 출력순서는 입력된 순서대로 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 9
         * 32 55 62 20 250 370 200 30 100
         * 예시 출력 1
         *
         * 23 2 73 2 3
         */

        int N = 9;
        int [] arr = new int []{32, 55 ,62 ,20, 250, 370, 200 ,30 ,100};

        int [] result = new int [N];
        int idx=0;

        for (int r : arr){
            result[idx]=reverse(r);
            idx++;
        }

        /**
         * 초반 수를 자리바꿔서 배열에 저장
         */
        for (int j : result){
                //자리 바꿔
               // int j = 0; //자리 바꾼 수

               if(j==0 || j==1)continue; //0 1이면 그냥 넘어감

               if(j==2 ||j==3||j==5||j==7){//2357 남김
                    System.out.print(j+ " ");
                    continue;
               }
               if(j%2==0 || j%3==0 || j%5 ==0|| j%7==0){//2,3,5,7의 배수는 지운다
                    continue;
               }
            System.out.print(j+" ");

        }

    }
    int reverse(int tmp){
        int res=0;
        int t;
        while (true) {
            if(tmp==0)break;
            t = tmp % 10; //10으로 나눈 나머지 : 1의자리 추출
            res = res * 10 + t; //1의자리를 붙여줌
            tmp = tmp / 10; //1의자리 삭제
        }
        return res;
    }
    int isPrime(int n) {//Prime Number(소수 구하는 공식)
        if( n <= 1 )
            return 0; //1은 소수가 아님.

        // 짝수는 소수에서 제외
        // 단, 2는 유일하게 짝수 중에서 소수
        if( n%2 == 0)
            return n==2 ? 1 : 0;

        // n이 홀수인 경우 sqrt(n)까지 나눠서 나눠떨어지는지 여부 체크
        for(int i=3; i<=Math.sqrt(n); i += 2) {
            // 나눠 떨어진다면 약수에 해당하므로 소수가 아님.
            if( n % i == 0)
                return 0;
        }
        // 위에서 걸러지지 않은 나머지 경우는 소수에 해당됨
        return 1;
    }

    public void P2_7(){
        /**
         * 7. 점수계산
         * 설명
         *
         * OX 문제는 맞거나 틀린 두 경우의 답을 가지는 문제를 말한다.
         *
         * 여러 개의 OX 문제로 만들어진 시험에서 연속적으로 답을 맞히는 경우에는 가산점을 주기 위해서 다음과 같이 점수 계산을 하기로 하였다.
         *
         * 1번 문제가 맞는 경우에는 1점으로 계산한다. 앞의 문제에 대해서는 답을 틀리다가 답이 맞는 처음 문제는 1점으로 계산한다.
         *
         * 또한, 연속으로 문제의 답이 맞는 경우에서 두 번째 문제는 2점, 세 번째 문제는 3점, ..., K번째 문제는 K점으로 계산한다. 틀린 문제는 0점으로 계산한다.
         *
         * 예를 들어, 아래와 같이 10 개의 OX 문제에서 답이 맞은 문제의 경우에는 1로 표시하고, 틀린 경우에는 0으로 표시하였을 때,
         *
         * 점수 계산은 아래 표와 같이 계산되어, 총 점수는 1+1+2+3+1+2=10 점이다.
         *
         *
         * 시험문제의 채점 결과가 주어졌을 때, 총 점수를 계산하는 프로그램을 작성하시오.
         *
         *
         * 입력
         * 첫째 줄에 문제의 개수 N (1 ≤ N ≤ 100)이 주어진다. 둘째 줄에는 N개 문제의 채점 결과를 나타내는 0 혹은 1이 빈 칸을 사이에 두고 주어진다.
         *
         * 0은 문제의 답이 틀린 경우이고, 1은 문제의 답이 맞는 경우이다.
         *
         *
         * 출력
         * 첫째 줄에 입력에서 주어진 채점 결과에 대하여 가산점을 고려한 총 점수를 출력한다.
         *
         *
         * 예시 입력 1
         *
         * 10
         * 1 0 1 1 1 0 0 1 1 0
         * 예시 출력 1
         *
         * 10
         */

        int N =10;
        int arr[] = {1 ,0 ,1, 1, 1, 0, 0 ,1 ,1, 0};
        int cnt=0;
        int result=0;
        for (int n : arr){
            if(n==0){
                result+=recursiveNum(cnt);
                cnt=0;
            }else if(n==1){
                cnt++;
            }

        }

        System.out.println(result);
        //System.out.println(recursiveNum(3));

    }
    int recursiveNum(int num){
        /**
         * n번째 까지의 숫자의 합
         */

        if(num==0)return 0; //누적한 숫자를 리턴

        return recursiveNum(num-1) + num;
    }

    public void P2_8(){
        /**
         * 8. 등수구하기
         * 설명
         *
         * N명의 학생의 국어점수가 입력되면 각 학생의 등수를 입력된 순서대로 출력하는 프로그램을 작성하세요.
         *
         * 같은 점수가 입력될 경우 높은 등수로 동일 처리한다.
         *
         * 즉 가장 높은 점수가 92점인데 92점이 3명 존재하면 1등이 3명이고 그 다음 학생은 4등이 된다.
         *
         *
         * 입력
         * 첫 줄에 N(3<=N<=100)이 입력되고, 두 번째 줄에 국어점수를 의미하는 N개의 정수가 입력된다.
         *
         *
         * 출력
         * 입력된 순서대로 등수를 출력한다.
         *
         *
         * 예시 입력 1
         *
         * 5
         * 87 89 92 100 76
         * 예시 출력 1
         *
         * 4 3 2 1 5
         */
        int N = 5;
        int arr[] ={87, 92, 92 ,100 ,76};
        int rank[] = new int [N];
        int cnt;
        for(int i=0 ; i<arr.length ; i++) {
            cnt=1;
            for (int j = 0; j < arr.length; j++) {
                if (arr[i] < arr[j]) {
                    cnt++;
                }
            }
            rank[i]=cnt;
        }

        System.out.println(arr);






    }

}
