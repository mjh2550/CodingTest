package Inf;

import java.util.Arrays;

public class Solve6 implements SolveProblem{

    @Override
    public void Problem() {
       //P6_1();//선택정렬
        //P6_2();//버블정렬
        P6_3();//삽입정렬
       // P6_4();

    }

    /**
     *   int n = in.nextInt();
     *     int arr[] = new int [n];
     *     for( int i =0 ; i<n ;i++){
     *       arr[i] = in.nextInt();
     *     }
     */

    public void P6_1(){
        /**
         * 1. 선택 정렬
         * 설명
         *
         * N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.
         *
         * 정렬하는 방법은 선택정렬입니다.
         *
         *
         * 입력
         * 첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.
         *
         * 두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.
         *
         *
         * 출력
         * 오름차순으로 정렬된 수열을 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 6
         * 13 5 11 7 23 15
         * 예시 출력 1
         *
         * 5 7 11 13 15 23
         */

        /**
         * 선택 정렬(選擇整列, selection sort)은 제자리 정렬 알고리즘의 하나로, 다음과 같은 순서로 이루어진다.
         *
         * 주어진 리스트 중에 최소값을 찾는다.
         * 그 값을 맨 앞에 위치한 값과 교체한다(패스(pass)).
         * 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.
         * 비교하는 것이 상수 시간에 이루어진다는 가정 아래, n개의 주어진 리스트를 이와 같은 방법으로 정렬하는 데에는 Θ(n2) 만큼의 시간이 걸린다.
         *
         * 선택 정렬은 알고리즘이 단순하며 사용할 수 있는 메모리가 제한적인 경우에 사용시 성능 상의 이점이 있다.
         */

        int n = 6;
        int []arr ={13 ,5 ,11 ,7 ,23, 15};
        int indexMin, tmp;

        for(int i = 0 ; i<n ;i++){ //오름차순이면 작은게 왼쪽, 최솟값을 찾는다
            indexMin=i; //첫 숫자 최솟값 가정
            for(int j=i+1; j<n ; j++){ //반복문 돌려서 첫 숫자보다 작은값 찾아서 인덱스 기록
                if(arr[j]<arr[indexMin]){
                    indexMin=j;
                }
            }
            //최솟값 인덱스랑 교체
            tmp = arr[indexMin];
            arr[indexMin] = arr[i];
            arr[i] = tmp;

        }

        for(int a : arr){
            System.out.print(a+" ");
        }
    }

    public void P6_2(){

        /**
         * 2. 버블 정렬
         * 설명
         *
         * N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.
         *
         * 정렬하는 방법은 버블정렬입니다.
         *
         *
         * 입력
         * 첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.
         *
         * 두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.
         *
         *
         * 출력
         * 오름차순으로 정렬된 수열을 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 6
         * 13 5 11 7 23 15
         * 예시 출력 1
         *
         * 5 7 11 13 15 23
         */

        /**거품 정렬 또는 버블 정렬( - 整列, 영어: bubble sort, sinking sort)은 두 인접한 원소를 검사하여 정렬하는 방법이다.
         * 시간 복잡도가 O(n^2)로 상당히 느리지만,
         *  코드가 단순하기 때 문에 자주 사용된다. 원소의 이동이 거품이 수면으로 올라오는 듯한 모습을 보이기 때문에 지어진 이름이다.
         *  양방향으로 번갈아 수행하면 칵테일 정렬이 된다.
         */
        int n = 6;
        int arr[] = {13, 5, 11 ,7, 23, 15};

        for(int i = 0 ; i<n ;i++){
            for(int j =1;j<n;j++){
                if(arr[j]<arr[j-1]){
                    int tmp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = tmp;
                }
            }
        }
        for(int a : arr){
            System.out.print(a+" ");
        }
    }

    public void P6_3(){

        /**
         * 입력
         * 첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.
         *
         * 두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.
         *
         *
         * 출력
         * 오름차순으로 정렬된 수열을 출력합니다.
         *
         *
         * 예시 입력 1
         *
         * 6
         * 11 7 5 6 10 9
         * 예시 출력 1
         *
         * 5 6 7 9 10 11
         */


        /**
         * 삽입 정렬(揷入整列, insertion sort)은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여
         * , 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다
         */

        int n = 6;
        int arr[] = {13, 5, 11 ,7, 23, 15};

        for(int i = 1 ; i< n ;i++){
            int tmp = arr[i];
            int j = i-1;
            while( j >= 0 && arr[j] > tmp ){ //정렬된 앞 부분의 끝부터 차례로 검사, 오른쪽게 크면 바로 false
                arr[j+1] =arr[j];//현재보다 왼쪽값이 더 크면 자리 바꿈
                j--;
            }
            //arr[j] < tmp 이므로 j+1 에 삽입
            arr[j+1] = tmp;
        }

        for( int a : arr){
            System.out.print(a + " ");
        }

    }
}
